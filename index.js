const { prefix, token } = require('./config');
const Discord = require('discord.js');
const Cron = require('node-cron');
const { User, Shop, Loans } = require('./databaseObjects');
const { taxValue, taxPercent, interest } = require('./loan');

const client = new Discord.Client();
const currency = new Discord.Collection();

const ToCsv  =  require("sqlite-to-csv");
let filePath  =  "./database.sqlite";
let outputPath  =  "./csv";
let sqliteToCsv  =  new ToCsv()
		    .setFilePath(filePath)
				.setOutputPath(outputPath);

Reflect.defineProperty(currency, 'add', {
	value: async function add(id, amount) {
		const user = currency.get(id);
		if (user) {
			user.userBalance += Number(amount);
      user.userPoints += Number(amount);
			return user.save();
		}
		const newUser = await User.create({ userID: id, userBalance: amount, userPoints: amount });
		currency.set(id, newUser);
		return newUser;
	},
});

Reflect.defineProperty(currency, 'addPoints', {
	value: async function addPoints(id, amount) {
		const user = currency.get(id);
		if (user) {
			user.userPoints += Number(amount);
			return user.save();
		}
	},
});

Reflect.defineProperty(currency, 'getBalance', {
	value: function getBalance(id) {
		const user = currency.get(id);
		return user ? user.userBalance : 0;
	},
});

Reflect.defineProperty(currency, 'getPoints', {
	value: function getPoints(id) {
		const user = currency.get(id);
		return user ? user.userPoints : 0;
	},
});

Reflect.defineProperty(currency, 'setBalanceAndPoints', {
	value: async function setBalanceAndPoints(id, amount) {
		const user = currency.get(id);
		user.userBalance = amount;
		user.userPoints = amount;
		return user.save();
	},
});

async function canAfford(id, size, calcInterest) {
	const total = taxValue + size * taxPercent + size * calcInterest;
	return currency.getPoints(id) + 300 < total ? true : false;
}

client.once('ready', async () => {
	const storedBalances = await User.findAll();
	storedBalances.forEach(b => currency.set(b.userID, b));
	Cron.schedule('0 0 0 * * *', async () => {
		const unpaidLoans = await Loans.findAll();

		for (const unpaidLoan of unpaidLoans) {
			const user = await User.findOne({ where: {userID: unpaidLoan.userID } });

			if (user.userBalance >= unpaidLoan.left * 2) {
				currency.add(user.userID, -(left * 2));
			} else {
				const items = await user.getItems();
				for (const item of items) {
					item.destroy();
				}
				currency.setBalanceAndPoints(user.userID, -200);
			}
			const deleteLoan = await Loans.destroy({ where: { userID: unpaidLoan.userID } });
		}
	});

	Cron.schedule('0 */15 * * * *', async () => {
		sqliteToCsv.convert().then( (result) => {
			console.log("Updated");
		}).catch((err) => {
			console.log("Failed to update.");
		});
	});

	console.log(`Logged in as ${client.user.tag}!`);
});

client.on('message', async message => {
	if (message.author.bot) return;

	currency.add(message.author.id, 1);

	if (!message.content.startsWith(prefix)) return;

  const args = message.content.slice(prefix.length).trim().split(/ +/);
  const command = args.shift().toLowerCase();

  if (command === 'help') {
		const helpEmbed = new Discord.MessageEmbed()
    .setColor('#b01313')
    .setTitle('__***Help***__')
    .setAuthor('Generated by Currency Bot', 'https://i.imgur.com/urDYDEx.png')
    .setThumbnail('https://i.imgur.com/urDYDEx.png')

    .addField(`${prefix}balance`, 'Displays your current balance.', false)
		.addField(`${prefix}points`, 'Displays your current points.', false)
		.addField(`${prefix}inventory`, 'Displays your inventory.', false)
		.addField(`${prefix}shop`, 'Displays the shop.', false)
		.addField(`${prefix}buy [item name]`, 'Buys an item of [item name] if you have enough balance to complete the purchase.', false)
		.addField(`${prefix}ranking`, 'Displays the point rankings.', false)
		.addField(`${prefix}loan-help`, 'Displays a help message regarding loans and loan related commands.', false)

    .setTimestamp()
    .setFooter('Currency Bot', 'https://i.imgur.com/urDYDEx.png');
		return message.reply(helpEmbed)

  } else if (command === 'balance') {
		return message.reply(`you have ${currency.getBalance(message.author.id)} coins.`);


  } else if (command === 'points') {
      return message.reply(`you have ${currency.getPoints(message.author.id)} points`);


  } else if (command === 'inventory') {
    const user = await User.findOne({ where: { userID: message.author.id } });
    const items = await user.getItems();

    if (!items.length) return message.reply(`your inventory is empty.`);

    const invEmbed = new Discord.MessageEmbed()
    .setColor('#b01313')
    .setTitle(`__***${message.author.tag}'s inventory***__`)
    .setAuthor("Generated by Currency Bot");
    for (const invItem of items) {
      const current = await Shop.findOne({ where: { id: invItem.itemID } });
      invEmbed.addField(current.itemName, 'Quantity: ' + invItem.quantity);
    }
    invEmbed.setTimestamp().setFooter('Currency Bot');

    return message.channel.send(invEmbed);


  } else if (command === 'shop') {
    const items = await Shop.findAll();

    const shopEmbed = new Discord.MessageEmbed()
    .setColor('#b01313')
    .setTitle('__***Shop***__')
    .setAuthor("Generated by Currency Bot")
    .setDescription('Available items in the shop');
    for (const shopItem of items) {
      shopEmbed.addField(shopItem.itemName, 'Cost: ' + shopItem.itemCost + '\n' + 'Points: ' + shopItem.itemPoints);
    }
    shopEmbed.setTimestamp().setFooter('Currency Bot');

    return message.channel.send(shopEmbed);


  } else if (command === 'buy') {
    if (!args.length) {
      return message.reply('you didn\'t specify what you want to buy.');
    }
    const item = await Shop.findOne({ where: { itemName: args[0] } });
		if (!item) {
      return message.reply('this item isn\'t in the shop.');
    }
    if (item.itemCost > currency.getBalance(message.author.id)) {
			return message.reply('you don\'t have enough money for that');
		}

		const user = await User.findOne({ where: { userID: message.author.id } });
		currency.add(message.author.id, -item.itemCost);
    currency.addPoints(message.author.id, item.itemPoints);
		await user.addItem(item);

		return message.reply(`You've bought a ${item.itemName}`);


  } else if (command === 'ranking') {
    message.channel.send(
  			currency.sort((a, b) => b.userPoints - a.userPoints)
  				.filter(user => client.users.cache.has(user.userID))
  				.first(10)
  				.map((user, position) => `(${position + 1}) ${(client.users.cache.get(user.userID).tag)}: ${user.userPoints} points`)
  				.join('\n'),
  			{ code: true }
  		);
		return message.channel.send('If you want to see all users\' points and balance visit this Google spreadsheet: ' + 'https://docs.google.com/spreadsheets/d/1dnVO4_aslGIGx8PgVz8--o8NUgiv4KuzBF9PDTShNeE/edit?usp=sharing');


  } else if (command === 'loan-help') {
		// HOW THE LOANS WORK
		// INTEREST RATE CALCULATIONS
		const loanEmbed = new Discord.MessageEmbed()
    .setColor('#b01313')
    .setTitle('__***Loan help***__')
    .setAuthor('Generated by Currency Bot', 'https://i.imgur.com/urDYDEx.png')
    .setThumbnail('https://i.imgur.com/urDYDEx.png')
		// LOAN DESCRIPTION
		.setDescription('Too lazy to write that atm')

    .addField(`${prefix}get-loan [loan size] [number of payments]`, 'Requests a loan. [loan size] must be at least 150 and [number of paymetns] must be at least 3. You can have only 1 active loan at a time.', false)
		.addField(`${prefix}make-payment`, 'Make a payment to your active loan.', false)
		.addField(`${prefix}current-loan`, 'Displays info about your current loan.', false)


    .setTimestamp()
    .setFooter('Currency Bot', 'https://i.imgur.com/urDYDEx.png');
		return message.reply(loanEmbed)


  } else if (command === 'get-loan') {
		// args[0] -> loanSize;
		// args[1] -> payments;

		if (args.length != 2) {
      return message.reply(`you didn\'t specify correctly the loan details. See ${prefix}loan-info for more information`);
    }

		if (!Number.isInteger(Number(args[0])) || !Number.isInteger(Number(args[1]))) {
			return message.reply('The arguments need to be non-flaot numbers.');
		} else if ( !Number.isSafeInteger(Number(args[0])) || !Number.isSafeInteger(Number(args[1]))) {
			return message.reply('The argumetns are too big.');
		}

		const currentLoan = await Loans.findOne({ where: { userID: message.author.id } });
		if (currentLoan) {
      return message.reply('you already have an active loan and can\'t get another one.');
    } else if (!currentLoan) {
			if (args[0] < 150) {
				return message.reply('the minimum loan size is 150.');
			}
			if (args[1] < 3) {
				return	message.reply('the minumum amount of payments is 3.')
			}

			const calcInterest = parseFloat(interest) + 0.5 * args[1] / 6;
			if (!canAfford(message.author.id, args[0], calcInterest)) {
				return message.reply('you can\'t afford this loan. Either try with a smaller loan size or more payments.');
			} else {
				Loans.create({ userID: message.author.id, loanSize: args[0], payments: args[1], interestPercent: calcInterest , left: (args[0] * (1 + taxPercent / 100 + calcInterest / 100) + taxValue)});
				currency.add(message.author.id, args[0]);
				return message.reply('you successfully created a loan.');
			}
		}


	} else if (command === 'make-payment') {
		const currentLoan = await Loans.findOne({ where: { userID: message.author.id } });
		if (!currentLoan) {
			return message.reply('you don\'t have an active loan so there\'s no need to make a payment.');
		} else {
			const paymentSize = currentLoan.left / currentLoan.payments;
			if (currency.getBalance(message.author.id) < Math.floor(paymentSize)) {
				return message.reply('you don\'t have enough balance to make the payment.');
			} else {
				currency.add(message.author.id, -Math.floor(paymentSize));
				//console.log(Math.floor(paymentSize));
				const updatedPayments = await Loans.update({ payments: currentLoan.payments - 1, left: currentLoan.left - Math.floor(paymentSize) }, { where: { userID: message.author.id } });

				if(currentLoan.payments === 1) {
					currency.add(message.author.id, -currentLoan.left);
					const deleteLoan = await Loans.destroy({ where: { userID: message.author.id } });
					return message.reply('your payment was successful. This was your last payment for this loan.');
				}
				return message.reply('your payment was successful. You have ' + (currentLoan.payments - 1) + ' to make.');
			}
		}


	} else if (command === 'current-loan') {
		const currentLoan = await Loans.findOne({ where: { userID: message.author.id } });
		const loanEmbed = new Discord.MessageEmbed()
    .setColor('#b01313')
    .setTitle('__***Current loan***__')
    .setAuthor("Generated by Currency Bot", 'https://i.imgur.com/urDYDEx.png')
		.setThumbnail('https://i.imgur.com/urDYDEx.png')
    .setDescription('Loan info for ' + message.author.tag)
    .addField('Loan size:', currentLoan.loanSize)
		.addField('Payments left:', currentLoan.payments)
		.addField('Average payment size: ', Math.floor(currentLoan.left / currentLoan.payments))
		.addField('Interest percent:', currentLoan.interestPercent + '%')
		.addField('Tax value:', taxValue)
		.addField('Tax percent:', taxPercent + '%')
		.addField('Remaining to be paid:', currentLoan.left)
    .setTimestamp().setFooter('Currency Bot', 'https://i.imgur.com/urDYDEx.png');

		return message.reply(loanEmbed);
	}
});


client.login(token);
